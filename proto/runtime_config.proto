syntax = "proto3";

package oci;

// RuntimeSpec is the generic runtime state information on a running container
message RuntimeSpec {
	// Mounts is a mapping of names to mount configurations.
	// Which mounts will be mounted and where should be chosen with MountPoints
	// in Spec.
	map<string, Mount> mounts = 1;
	// Hooks are the commands run at various lifecycle events of the container.
	Hooks hooks = 2;
	// LinuxRuntime is the Linux-specific, host-specific configuration.
	LinuxRuntime linuxx = 3;
}

// MountFieldEntry is more backwards compatible protobuf associative map (than map<string, Mount>)
message MountFieldEntry {
	string key = 1;
	Mount value = 2;
}

// Mount specifies a mount for a container
message Mount {
	// Type specifies the mount kind.
	string type = 1;
	// Source specifies the source path of the mount. In the case of bind mounts on
	// linux based systems this would be the file on the host.
	string source = 2;
	// Options are fstab style mount options.
	repeated string options = 3;
}

// Hook specifies a command that is run at a particular event in the lifecycle of a container
message Hook {
	string path = 1;
	repeated string args = 2;
	repeated string env = 3;
}

// Hooks for container setup and teardown
message Hooks {
	// Prestart is a list of hooks to be run before the container process is executed.
	// On Linux, they are run after the container namespaces are created.
	repeated Hook prestart = 1;
	// Poststop is a list of hooks to be run after the container process exits.
	repeated Hook poststop = 2;
}

/*
BEGIN Linux specific runtime
*/

// LinuxRuntime hosts the Linux-only runtime information
message LinuxRuntime {
	// UidMapping specifies user mappings for supporting user namespaces on linux.
	repeated IDMapping uidMappings = 1;
	// GidMapping specifies group mappings for supporting user namespaces on linux.
	repeated IDMapping gidMappings = 2;
	// Rlimits specifies rlimit options to apply to the container's process.
	repeated Rlimit rlimits = 3;
	// Sysctl are a set of key value pairs that are set for the container on start
	map<string, string> sysctl = 4;
	// Resources contain cgroup information for handling resource constraints
	// for the container
	Resources resources = 5;
	// CgroupsPath specifies the path to cgroups that are created and/or joined by the container.
	// The path is expected to be relative to the cgroups mountpoint.
	// If resources are specified, the cgroups at CgroupsPath will be updated based on resources.
	string cgroupsPath = 6;
	// Namespaces contains the namespaces that are created and/or joined by the container
	repeated Namespace namespaces = 7;
	// Devices are a list of device nodes that are created and enabled for the container
	repeated Device devices = 8;
	// ApparmorProfile specified the apparmor profile for the container.
	string apparmorProfile = 9;
	// SelinuxProcessLabel specifies the selinux context that the container process is run as.
	string selinuxProcessLabel = 10;
	// Seccomp specifies the seccomp security settings for the container.
	Seccomp seccomp = 11;
	// RootfsPropagation is the rootfs mount propagation mode for the container
	string rootfsPropagation = 12;
}

// IDMapping specifies UID/GID mappings
message IDMapping {
	// HostID is the UID/GID of the host user or group
	int32 hostID = 1;
	// ContainerID is the UID/GID of the container's user or group
	int32 containerID = 2;
	// Size is the length of the range of IDs mapped between the two namespaces
	int32 size = 3;
}

// Rlimit type and restrictions
message Rlimit {
	// Type of the rlimit to set
	string type = 1;
	// Hard is the hard limit for the specified type
	uint64 hard = 2;
	// Soft is the soft limit for the specified type
	uint64 soft = 3;
}

// Resources has container runtime resource constraints
message Resources {
	// DisableOOMKiller disables the OOM killer for out of memory conditions
	bool disableOomKiller = 1;
	// Memory restriction configuration
	Memory memory = 2;
	// CPU resource restriction configuration
	CPU cpu = 3;
	// Task resource restriction configuration.
	Pids pids = 4;
	// BlockIO restriction configuration
	BlockIO blockIO = 5;
	// Hugetlb limit (in bytes)
	repeated HugepageLimit hugepageLimits = 6;
	// Network restriction configuration
	Network network = 7;
}

// Memory for Linux cgroup 'memory' resource management
message Memory {
	// Memory limit (in bytes)
	int64 limit = 1;
	// Memory reservation or soft_limit (in bytes)
	int64 reservation = 2;
	// Total memory usage (memory + swap); set `-1' to disable swap
	int64 swap = 3;
	// Kernel memory limit (in bytes)
	int64 kernel = 4;
	// How aggressive the kernel will swap memory pages. Range from 0 to 100. Set -1 to use system default
	int64 Swappiness = 5;
}

// CPU for Linux cgroup 'cpu' resource management
message CPU {
	// CPU shares (relative weight vs. other cgroups with cpu shares)
	int64 shares = 1;
	// CPU hardcap limit (in usecs). Allowed cpu time in a given period
	int64 quota = 2;
	// CPU period to be used for hardcapping (in usecs). 0 to use system default
	int64 period = 3;
	// How many time CPU will use in realtime scheduling (in usecs)
	int64 realtimeRuntime = 4;
	// CPU period to be used for realtime scheduling (in usecs)
	int64 realtimePeriod = 5;
	// CPU to use within the cpuset
	string cpus = 6;
	// MEM to use within the cpuset
	string mems = 7;
}

// Pids for Linux cgroup 'pids' resource management (Linux 4.3)
message Pids {
	// Maximum number of PIDs. A value < 0 implies "no limit".
	int64 limit = 1;
}

// BlockIO for Linux cgroup 'blockio' resource management
message BlockIO {
	// Specifies per cgroup weight, range is from 10 to 1000
	int64 weight = 1;
	// Weight per cgroup per device, can override BlkioWeight
	string weightDevice = 2;
	// IO read rate limit per cgroup per device, bytes per second
	string throttleReadBpsDevice = 3;
	// IO write rate limit per cgroup per divice, bytes per second
	string throttleWriteBpsDevice = 4;
	// IO read rate limit per cgroup per device, IO per second
	string throttleReadIopsDevice = 5;
	// IO write rate limit per cgroup per device, IO per second
	string throttleWriteIopsDevice = 6;
}

// HugepageLimit structure corresponds to limiting kernel hugepages
message HugepageLimit {
	string pagesize = 1;
	int32 limit = 2;
}

// Network identification and priority configuration
message Network {
	// Set class identifier for container's network packets
	string classId = 1;
	// Set priority of network traffic for container
	repeated InterfacePriority priorities = 2;
}

// InterfacePriority for network interfaces
message InterfacePriority {
	// Name is the name of the network interface
	string name = 1;
	// Priority for the interface
	int64 priority = 2;
}

// Namespace is the configuration for a linux namespace
message Namespace {
	// Type is the type of Linux namespace
	string type = 1;
	// Path is a path to an existing namespace persisted on disk that can be joined
	// and is of the same type
	string path = 2;
}

// Device represents the information on a Linux special device file
message Device {
	// Path to the device.
	string path = 1;
	// Device type, block, char, etc.
	// TODO(vbatts) ensure int32 is fine here, instead of golang's rune
	int32 type = 2;
	// Major is the device's major number.
	int64 major = 3;
	// Minor is the device's minor number.
	int64 minor = 4;
	// Cgroup permissions format, rwm.
	string permissions = 5;
	// FileMode permission bits for the device.
	// TODO(vbatts) os.FileMode is an octal uint32
	uint32 fileMode = 6;
	// Uid of the device.
	uint32 uid = 7;
	// Gid of the device.
	uint32 gid = 8;
}

// Seccomp represents syscall restrictions
message Seccomp {
	// TODO(vbatts) string instead of "Action" type
	string defaultAction = 1;
	repeated Syscall syscalls = 2;
}

// Syscall is used to match a syscall in Seccomp
message Syscall {
	string name = 1;
	string action = 2;
	repeated Arg args = 3;
}

// Arg used for matching specific syscall arguments in Seccomp
message Arg {
	uint32 index = 1;
	uint64 value = 2;
	uint64 value_two = 3;
	// Op is the operator string
	string op = 4;
}

/*
END Linux specific runtime
*/

